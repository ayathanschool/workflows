// This is a patch to apply to App.jsx to improve lesson plan duplicate detection
// Insert this code at the appropriate locations in App.jsx

// 1. Import the validation utilities at the top of the file
import { validateLessonPlan, fetchExistingPlans } from './utils/lessonPlanValidation';

// 2. Add this function to the component to pre-fetch plans for validation
const fetchPlansForValidation = async () => {
  if (user && user.email) {
    try {
      const plans = await fetchExistingPlans(user.email);
      return plans;
    } catch (error) {
      console.error('Failed to fetch plans for validation:', error);
    }
  }
  return [];
};

// 3. Enhance the handleSubmitPreparation function with better duplicate detection
// Replace or modify your existing handleSubmitPreparation function:
const handleSubmitPreparation = async () => {
  // Get chapter from selected scheme if available
  let chapterFromScheme = '';
  if (preparationData.schemeId) {
    const scheme = schemes.find(s => s.schemeId === preparationData.schemeId);
    if (scheme) chapterFromScheme = scheme.chapter || '';
  }

  // Create plan object for validation
  const planToValidate = {
    class: selectedSlot.class,
    subject: selectedSlot.subject,
    session: Number(preparationData.session || selectedSlot.period),
    chapter: chapterFromScheme,
    lpId: selectedSlot.lpId // Include lpId if updating existing plan
  };

  // Validate against existing plans
  const existingPlans = await fetchPlansForValidation();
  const validationResult = validateLessonPlan(planToValidate, existingPlans);

  // Show error if duplicate detected
  if (validationResult.isDuplicate) {
    setToast({ 
      type: 'warning', 
      text: validationResult.message
    });
    setTimeout(() => setToast(null), 3000);
    return;
  }

  // Continue with existing submission logic
  try {
    // Use withSubmit so the overlay/toast appears during submission
    await withSubmit('Submitting lesson plan...', async () => {
      const res = await api.submitLessonPlanDetails(selectedSlot.lpId, {
        class: selectedSlot.class,
        subject: selectedSlot.subject,
        session: Number(preparationData.session || selectedSlot.period),
        date: selectedSlot.date,
        schemeId: preparationData.schemeId,
        objectives: preparationData.objectives,
        activities: preparationData.activities,
        notes: preparationData.notes,
        teacherEmail: user?.email || '',
        teacherName: user?.name || ''
      });
      // If server responded with an error payload, throw to trigger error handling
      if (res && res.error) throw new Error(res.error);
      return res;
    });
    
    // Rest of your existing success handling code...
  } catch (err) {
    // Your existing error handling code...
  }
};

// 4. Add this warning to your preparation form JSX:
/*
<div className="mb-4 p-3 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700">
  <p className="font-bold">Important:</p>
  <p>Lesson plans are specific to a class-subject-session-chapter combination.</p>
  <p>You cannot create multiple plans for the same combination.</p>
</div>
*/